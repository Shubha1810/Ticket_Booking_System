use ticketbookingsystem;
-- TASK 4

-- 1. calculate the average ticket price for events in each venue using a subquery
select venue_id, 
(select avg(ticket_price) from event e2 where e2.venue_id = e1.venue_id) as avg_price
from event e1;

-- 2. find events with more than 50% of tickets sold using subquery
select * from event
where total_seats > 0 and (total_seats - available_seats) > total_seats * 0.5;

-- 3. calculate the total number of tickets sold for each event
select event_id, 
(select sum(num_tickets) from booking b where b.event_id = e.event_id) as total_tickets_sold
from event e;

-- 4. find users who have not booked any tickets using a not exists subquery
select * from customer c
where not exists (select 1 from booking b where b.customer_id = c.customer_id);

-- 5. list events with no ticket sales using a not in subquery
select * from event
where event_id not in (select distinct event_id from booking);

-- 6. calculate the total number of tickets sold for each event type using subquery in from clause
select e.event_type, sum(b.num_tickets) as total_tickets
from (select event_id, event_type from event) e
join booking b on b.event_id = e.event_id
group by e.event_type;

-- 7. find events with ticket prices higher than the average ticket price using a subquery in where clause
select * from event
where ticket_price > (select avg(ticket_price) from event);

-- 8. calculate the total revenue generated by events for each user using a correlated subquery
select c.customer_id, c.customer_name,
(select sum(b.total_cost) from booking b 
where b.customer_id = c.customer_id) as total_revenue
from customer c;

-- 9. list users who have booked tickets for events in a given venue using a subquery in where clause
select * from customer
where customer_id in (select b.customer_id from booking b
inner join event e on b.event_id = e.event_id
where e.venue_id = 1 );

-- 10. calculate the total number of tickets sold for each event category using subquery with group by
select event_type,total_tickets_sold
from(select e.event_type, sum(b.num_tickets) total_tickets_sold
     from event e 
     inner join booking b on e.event_id=b.event_id
     group by e.event_type) as T;

-- 11. find users who have booked tickets for events in each month using subquery with date_format
select distinct customer_id, 
(select date_format(booking_date, '%Y-%m') 
from booking b2 where b2.customer_id = b1.customer_id limit 1) as month
from booking b1;

-- 12. calculate the average ticket price for events in each venue using a subquery
select venue_id,
(select avg(ticket_price) from event e2 where e2.venue_id = e1.venue_id) as avg_price
from event e1
group by venue_id;
