use ticketbookingsystem;

-- TASK 3

-- 1. list events and their average ticket prices
select event_name, avg(ticket_price) as average_price
from event
group by event_name;

-- 2. calculate the total revenue generated by events
select event_id, sum(total_cost) as total_revenue
from booking
group by event_id;

-- 3. find the event with the highest ticket sales
select event_id, sum(num_tickets) as total_tickets
from booking
group by event_id
order by total_tickets desc
limit 1;

-- 4. calculate the total number of tickets sold for each event
select event_id, sum(num_tickets) as total_noof_tickets_sold
from booking
group by event_id;

-- 5. Write a SQL query to Find Events with No Ticket Sales. 


-- 6. Write a SQL query to Find the User Who Has Booked the Most Tickets.
select customer_id, sum(num_tickets) as booked_tickets
from booking
group by customer_id
order by booked_tickets desc
limit 1;

-- 7. Write a SQL query to List Events and the total number of tickets sold for each month.
select month(booking_date) ,event_id, sum(num_tickets) as total_tickets
from booking
group by month(booking_date), event_id
order by month(booking_date);

-- 8. Write a SQL query to calculate the average Ticket Price for Events in Each Venue. 
select venue_id, avg(ticket_price) as avg_price
from event
group by venue_id;

-- 9. calculate the total number of tickets sold for each event type
select e.event_type, sum(b.num_tickets) as total_tickets
from event e
join booking b on e.event_id = b.event_id
group by e.event_type;

-- 10. Write a SQL query to calculate the total Revenue Generated by Events in Each Year. 
select year(booking_date) as year, sum(total_cost) as total_revenue
from booking
group by year;

-- 11. Write a SQL query to list users who have booked tickets for multiple events.
select customer_id
from booking
group by customer_id
having count(distinct event_id) > 1;

-- or

select customer_name,sum(num_tickets) as total_tickets,count(distinct event_id)
from customer join booking using(customer_id)
group by customer_name;

-- 12. Write a SQL query to calculate the Total Revenue Generated by Events for Each User. 
select customer_id, sum(total_cost) as total_spent
from booking
group by customer_id;

-- 13. Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue.
select e.event_type, v.venue_name, avg(e.ticket_price) as avg_price
from event e
inner join venue v on e.venue_id = v.venue_id
group by e.event_type, v.venue_name;

-- or

select event_type, venue_id, avg(ticket_price) as avg_price
from event
group by event_type, venue_id;


-- 14. Write a SQL query to list Users and the Total Number of Tickets They've Purchased in the Last 30 days.
select c.customer_id, c.customer_name, sum(b.num_tickets) as tickets_purchased
from booking b inner join customer c on b.customer_id = c.customer_id
where b.booking_date >= curdate() - interval 30 day
group by c.customer_id, c.customer_name;

